{%- set msg = message %}
{% set msg_type = msg | message_type %}
{% set T_Message = msg.generic_args[0].message %}
{% set T = T_Message | message_type %}

@dataclasses.dataclass
class {{ msg_type }}(BaseMessage):
    # size: int
    values: list[{{ T }}]

    def __setattr__(self, name, value):
        if name == 'values':
            value = [{{ T }}(_value) if type(_value) != {{T}} else _value for _value in value]
        super().__setattr__(name, value)


    def to_bytes(self) -> bytes:
        buffer = bytearray()
        buffer += int(len(self.values)).to_bytes(2, "little")

        for value in self.values:
            assert type(value) == {{ T }}, f"Wrong element type of {{ msg_type }} - {value} must be {{ T }} ihnerited from BaseMessage"
            buffer += value.to_bytes()

        return bytes(buffer)
    
    @classmethod
    def from_bytes(cls, buffer: bytes) -> tuple[Self, int]:
        _size = int.from_bytes(buffer[:2], "little")

        offset = 2

        values = []
        for i in range(_size):
            value_message, _offset = {{ T }}.from_bytes(buffer[offset:])
            values.append(value_message)
            offset += _offset
        
        return cls(values), offset