#pragma pack(push, 1)

{%- set msg = message %}
{% set msg_type = msg | message_type %}
{% set T_Message = msg.generic_args[0].message %}
{% set T = T_Message | message_type %}

struct {{ msg_type }} {
    std::uint16_t size;
    {{ T }} values[1];

    static void Initialize(std::int8_t* buf, std::uint16_t size)  {
        auto value = ::new(buf) {{ msg_type  }}(size);
        {% if T_Message.is_user_defined %}
        for (auto i = 0; i < size; ++i) {
            {{ T }}::Initialize((std::int8_t*) value->get(i));
        }
        {% endif %}
    };

    static {{ msg_type }}* Allocate(uint16_t size) {
        auto alloc_size = get_vararr_size(size);
        auto buf = new std::int8_t[alloc_size]{0};
        return ::new(buf) {{ msg_type }}(size);
    }

    explicit {{ msg_type }}(std::uint16_t _size) : size(_size) {}

    {{ msg_type }}(const {{ msg_type }}&) = delete;

    {{ msg_type }}({{ msg_type }}&&) = delete;

    [[nodiscard]] {{ T }}* get(int i) const {
        return &(({{ T }}*) ((std::int8_t*) values))[i];
    }

    {{ T }}& operator[](int i) const {
        return *get(i);
    }

    std::uint16_t get_size() { return sizeof({{ msg_type }}) + (size - 1) * {{ T_Message.get_sizeof_method(T) }}; }

    void destroy() {
        delete[] (std::int8_t*) this;
    }

    static constexpr std::int32_t get_vararr_size(std::uint16_t size) {
        return sizeof({{ msg_type }}) + (size - 1) * {{ T_Message.get_sizeof_method(T) }};
    }
};

std::int32_t get_vararr_size(const {{ msg_type }}& arr) {
    return sizeof({{ msg_type }}) + (arr.size - 1) * {{ T_Message.get_sizeof_method("arr.values[0]") }};
}
#pragma pack(pop)
