{% from 'cpp/Hashtype.j2' import HashType %}

{% set msg = message %}
{% set msg_type = msg | message_pure_type -%}
{% set msg_mangled_type = msg | message_type -%}
{% set sorted_fields = msg.fields | sort(attribute="message.is_variative") %}

static std::pair<{{ msg_mangled_type }}, std::size_t> read(std::span<char> buf, Type<{{ msg_mangled_type }}>) {
    {{ msg_mangled_type }} result;
    std::size_t offset = 0;
    std::size_t dO = 0;

    result.protocol_hash = *({{ HashType(data.protocol_hash_bytes_count) }}*) buf.data();
    offset += {{ data.protocol_hash_bytes_count }};

    {% block deserialization_block %}
    {% for field in sorted_fields -%}
    {% set _field_name = field | field_name %}
    {% set _field_message = field | field_message %}

    std::tie(result.{{ _field_name }}, dO) = read(buf.subspan(offset), Type<{{_field_message | message_type}}>{});
    offset += dO;
    {% endfor %}
    {% endblock %}
    return {result, offset};
}