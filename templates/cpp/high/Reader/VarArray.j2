{% from 'cpp/Hashtype.j2' import HashType %}

{% set msg = message %}
{% set msg_type = msg | message_pure_type -%}
{% set msg_mangled_type = msg | message_type -%}
{% set T_Message = msg.generic_args[0].message %}
{% set T = T_Message | message_type %}

static std::pair<{{ msg_mangled_type }}, std::size_t> read(std::span<char> buf, Type<{{ msg_mangled_type }}>) {
    {{ msg_mangled_type }} result;
    std::size_t offset = 0;

    {% block deserialization_block %}
    std::uint16_t size = *(std::uint16_t*) buf.data();
    offset += sizeof(size);

    result._values.reserve(size);
    
    for(std::uint16_t i=0; i<size; ++i) {
        {{ T }} value;
        std::size_t dO = 0;
        
        std::tie(value, dO) = read(buf.subspan(offset), Type<{{ T }}>{});
        offset += dO;

        result._values.push_back(value);
    }
    {% endblock %}

    return {result, offset};
}