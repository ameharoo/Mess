{%- set msg = message %}
{% set msg_type = msg | message_type %}
{% set T_Message = msg.generic_args[0].message %}
{% set T = T_Message | message_type %}


struct {{ msg_type }} {
    std::vector<{{ T }}> _values;

    {{ msg_type }}(const std::vector<{{ T }}>& values) : _values(values) {}

    {{ msg_type }}() = default;

    {% if T_Message | message_pure_type in ['Uint8', 'Int8'] %}
    {{ msg_type }}(const char* values) {
        _values.reserve(std::strlen(values));
        for (const char* it = values; *it != '\0'; ++it) {
            _values.emplace_back(*it);
        }
    }

    {{ msg_type }}(const std::string& values) : _values({values.begin(), values.end()}) {}

    std::string str() const {
        return std::string((char*)_values.data(), _values.size());
    }

    operator std::string() const {
        return str();
    }
    {% endif %}
    
    std::vector<{{ T }}>::iterator begin() {
        return _values.begin();
    }
    
    std::vector<{{ T }}>::iterator end() {
        return _values.begin();
    }
    
    std::size_t size() {
        return _values.size();
    }
    {#
    std::vector<char> to_bytes() {
        std::vector<char> buf;
        std::uint16_t buf_size = _values.size();
        buf.insert(buf.end(), (char*)buf_size, (char*)buf_size+sizeof(buf_size));

        {% bl   ock serialization_block %}
        for (auto& value : _values) {
            {% if T_Message.is_user_defined or T_Message.is_complex_type %}
            // Mess container
            auto buf_value = value.to_bytes();
            {% else %}
            // Trying access like a plain bytes
            auto buf_value = std::vector((char*)value, (char*)value+{{T_Message.get_sizeof_method("value")}});
            {% endif %}
            buf.insert(buf.end(), buf_value.begin(), buf_value.end());
        }
        {% endblock %}

        return buf;
    }
    #}
};
